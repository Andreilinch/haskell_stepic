-- В функциональном программировании списки играют фундаментальную роль
-- схожую с ролью массивов в императивном программировании.

-- В Хаскеле существуют два базовых способа создания списков
-- 1. Создать пустой список
-- 2. Добавить в голову существующего списка новый элемент

-- Пример
-- Для создания пустого списка воспользуемся оператором []

-- Prelude> []
-- [] - пустой список

-- теперь добавим элемент в голову списка с помощью оператора :

-- Prelude> 3 : []
-- [3]

-- Prelude> let lst = 5 : 3 : []
-- Prelude> lst
-- [5,3]

-- такой синтаксис не требует дополнительных скобок так как оператор :
-- правоассоциативный

-- Prelude> :i :
-- type [] :: * -> *
-- data [] a = ... | a : [a]
        -- Defined in ‘GHC.Types’
-- infixr 5 :

-- запись [ , ] является синтакическим сахаром для _ : _ : []
-- Prelude> [5,3] == lst
-- True

-- определим простую функцию, которая будет вставлять 42 в голову нашего списка
module Demo where
    
let cons42 = (42 :)

-- Prelude> cons42 [1, 3]
-- [42,1,3]