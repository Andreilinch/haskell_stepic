module Demo where

import Prelude hiding (last, init, reverse)

last :: [a] -> a
last (x:[]) = x             -- такое сопоставление происходит только когда список содержит 1 элемент
last (_:xs) = last xs       

init :: [a] -> [a]          -- возвращает исходный список без last
init [x]    =  []           -- тоже сопоставление с образцом одноэлементный список, можно просто [_] без x
init (x:xs) =  x : init xs 

reverse :: [a] -> [a]
reverse l = rev l [] where
    rev []     a = a            -- если исходный список l пустой, возвращаем второй список
    rev (x:xs) a = rev xs (x:a) -- рекурсивно вызываем rev, беря от первого списка всегда хвост
                                -- таким образом он станет пустым, а второй список наобарот нарастает
