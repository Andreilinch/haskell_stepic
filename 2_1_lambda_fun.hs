-- Анонимные функции
-- В хаскеле, как и в математике, функции обычное именованы, и когда мы хотим вызвать функцию,
-- мы обращаемся к ней по имени. Например:
--
-- Оператор возведения в степень, частично применный к двойке, задает функцию, которая
-- возводит что-то квадрат. С одной стороны это выражение языка, а с другой - некоторая функция
-- В хаскеле есть универсальный механизм, позволяющий любое выражение превратить в  функцию
-- Выражение 2 * x + 7 не может использоваться как замкнутое, так как содержит х
-- Мы обычно поступаем так - задаем функцию, которая будет вычислять это выражение.

let fun x = 2 * x + 7

-- Даем имя функции и говорим, что x является ее параметром.
-- Однако существует альтернативный подход!
-- Мы можем связать переменную х не с помощью обьявления именованной функции, а с помощью
-- лямда выражения.

\x -> 2 * x + 7

-- Эта функция не имеет имени, но ведет себя также, как именованная функция. Это анонимная функция или лямда функция.
-- (\x -> 2 * x + 7) 10
-- 27
-- fun 10
-- 27

-- Мы можем определить функцию fun с помощью этого лямбда выражения

let fun' = (\x -> 2 * x + 7)

-- \ читается как лямбда
-- Все тоже самое и для функции двух аргументов

let lenVector x y = sqrt $ x^2 + y^2
let lenVector' x = \y -> sqrt $ x^2 + y^2

-- или все аргументы

let lenVector'' = x\ -> \y -> sqrt $ x^2 + y^2

-- синтаксический сахар для двух аргументов

let lenVector''' = \x y -> sqrt $ x^2 + y^2

-- анонимные функции очень часто применяются вместе с функциями высшего порядка
-- Пример:
-- представим, что мы работаем с обьектом парой пар

let p1 = ((1,2), (3,4))
let p2 = ((9,8), (7,6))

-- нам хочется написать функцию, которая будет суммировать первые элементы первых элементов пар

sumFstFst = (+) `on` helper
  where helper pp = fst $ fst pp

-- sumFstFst p1 p2
-- 10
-- (0.01 secs, 65,552 bytes)

-- все работает, но мы не хотим определять именованную функцию helper, а хотим использовать
-- лямбда выражения. Перепишем нашу функцию:

sumFstFst' = (+) `on` (\pp -> fst $ fst pp)

-- композицию функций fst, это можно переписать более компактно

sumFstFst'' = (+) `on` (fst . fst)


