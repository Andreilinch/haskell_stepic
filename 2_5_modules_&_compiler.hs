-- Программы на языке Haskell представляют собой коллекцию модулей
-- Главный модуль должен называться Main и содержать в себе метод Main
-- Рекомендуется, чтобы каждый модуль находился в отдельном файле и его имя 
-- совпадала с именем модуля, который он содержит

-- Модуль Prelude всегда импортируется (неявно)

-- Различные примеры импорта модулей:с

import  Data.Char -- импортируем все функции

import  Data.Char (toLower, toUpper) -- импортируем определенные функции

import  Data.Char hiding (toUpper) -- импортируем ВСЕ, кроме определенных функций

-- иногда нужно импортировать одну и ту же функцию из двух разных модулей

import qualified Data.Set -- такая запись позволяет обращаться к функциям без указания Data.Set

-- именам модуля можно назанчать локадбные псевдонимы

import qualified Data.Set as Set

-- *Main Data.List Data.Set> :t Set.union
-- Set.union :: Ord a => Set a -> Set a -> Set a

-- мы можем переопределить какую то функция из библиотеки Prelude, вызвавя ее явно

import Prelude hiding (..)

-- Мы можем управлять списком имен, экспортируемым нашим модулем и делать их
-- доступными для других модулей

module Demo_1 where

import Demo_2

...

-- мы можем настраивать какие функции в нашем модуле будут доступны для импорта
-- с помощью директивы экспорта

module Demo_2 (ThisFunctionAvailable) where
    ...

-- это единственный механиз в Хаскеле сделать инкапсуляцию - сделать это на уровне
-- модуля, то есть сделать некоторую часть нашего кода не доступной снаружи
-- аналог private классов

-- Компилятор Хаскеля работает по следующему алгоритму
-- 1. Файл с расширением .hs подвергается синтаксическому разбору
-- 2. Проверка типов
-- 3. Рассахаривание до языка Core с низкоуровневыми конструкциями
-- 4. Оптимизация в несколько циклов до кодогенерации до грфовой STG машины
-- 5. Преобразование в C--
-- 6. Генерирутся код для целевой платформы

-- Кароче сложно. Тут подробнее http://aosabook.org/en/ghc.html
