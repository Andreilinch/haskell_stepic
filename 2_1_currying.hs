-- Каррирование (от англ. currying, иногда — карринг) — преобразование функции от многих
-- аргументов в набор функций, каждая из которых является функцией от одного аргумента.
-- Возможность такого преобразования впервые отмечена в трудах Готтлоба Фреге, 
-- систематически изучена Моисеем Шейнфинкелем в 1920-е годы, а наименование получило по имени
-- Хаскелла Карри — разработчика комбинаторной логики, в которой сведение к функциям одного
-- аргумента носит основополагающий характер.

-- функция fst возвращает первый элемент пары

-- fst (1, 2)
-- 1

-- это функция также может быть рассмотрена как функция двух элементов, то есть она не каррирована
-- В чем смысл процедуры каррирования?
--
-- представим что у нас есть какая-то функция высшего порядка, например `on`
-- :t on
-- on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
-- `on` имеет такой тип, то есть в качеств первого элемента он ожидает функцию двух аргументов
-- то есть мы не можем вызвать `on` на не каррированной функции
-- :t fst `on` (^2)
-- <interactive>:1:1: error:
--     • Occurs check: cannot construct the infinite type:
--             b ~ (b -> c, b0)

-- в языке Хаскелль есть специальный комбинатор, который помогает сделать каррирование
-- :t curry fst `on` (^2)
-- curry fst `on` (^2) :: Num c => c -> c -> c
-- Как устроена функции curry?
-- Давайте попытаемся ее сконструировать
-- функция должна принимать некоторую функцию, заданную над парой (некаррированную) и два
-- аргумента, которые мы хотим использовать в этой паре:

let curry' f x y = f (x, y)

-- :t curry'
-- curry' :: ((a, b) -> t) -> a -> b -> t
-- в качестве первого аргумента принимем некаррированную функцию двух аргументов и превращаем ее
-- в каррированную, где аргумент передается последовательно

-- существует и обратная функция 
-- :t uncurry
-- uncurry :: (a -> b -> c) -> (a, b) -> c
