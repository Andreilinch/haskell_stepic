-- Классы типов
-- Специальный полиморфизм устроен по-другому. Функция по-прежнему может вызываться на разных
-- типов данных, но каждый тип данных, который использует специальный полиморфизм должен 
-- обеспечивать реализацию соответствующего интерфейса для того, чтобы функция могла его 
-- вызывать. Этот интерфейс в хаскеле называется классом типов и класс типов описывает 
-- интерфейс целиком. И есть еще одно понятие – реализация класса типов, реализация 
-- представителя. Тип данных должен объявлять представителя класса типов, т.е. 
-- имплементировать соответствующий интерфейс. И после того, как имплементировал 
-- соответствующий интерфейс мы можем уже в специально полиморфную функцию такой тип данных передавать.
-- То есть функция специально полиморфна если для каждого типа, на значениях которого ее можно вызывать, имеется своя реализация этой функции.
-- Например:
-- Числовые константы в хаскеле имееют полиморфный тип
-- :t 7
-- 7 :: Num p => p  - символ следования разделяет выражение на две части
--       |       |_ непосредственно тип выражения ("7 имеет тип а")
--    контекст:
--    Num - имя интерфейса
--    a - тип применения интерфейса
--
-- 7 имеет тип а, но для этого типа а должен быть выстроен интерфейс Num

-- :t (>)
-- (>) :: Ord a => a -> a -> Bool
-- оператор принимает два аргумента и возвращает булево значение, однако контекст
-- ord a означает что тип а должен быть представителем класса ord

-- :t (> 7)
-- (> 7) :: (Ord a, Num a) => a -> Bool
-- теперь два элемента контекста
-- тоже для пары
-- :t (> (1, 7)
-- (> (1, 7)) :: (Ord a, Ord b, Num a, Num b) => (a, b) -> Bool)

-- :t (* 'c')
--
-- <interactive>:1:2: error:
--     • No instance for (Num Char) arising from a use of ‘*’
-- 'с' не является представителем класса типов Num

-- Задача
-- На нехватку какого представителя какого класса типов пожалуется интерпретатор при попытке вывести тип выражения
-- True + False * False
--
-- :t True + False * False
--
-- <interactive>:1:1: error:
--     • No instance for (Num Bool) arising from a use of ‘+’

