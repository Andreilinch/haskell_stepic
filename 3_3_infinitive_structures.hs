module Demo where

-- В Хаскелл из-за ленивости языка, есть возможность создавать бесконечные 
-- структуры данных и работать с ними, например, бесконечные списки.

-- let ones = 1 : ones - бесконечный список единиц

let nats n = n : nats (n + 1) -- бесконечный список натуральных чисел

-- оказывается с помощью например функции take можно взять конечное число элементов из бесконечного списка

-- Prelude> take 10 $ nats 5
-- [5,6,7,8,9,10,11,12,13,14]

--это возможно из-за ленивости - вычисления выполняются только когда необходимы

-- Prelude> head $ nats 42
-- 42

-- Процесс редукции:

-- head (x:xs) = x                  - определение head
-- head [] = error "Empty list"

-- - head $ nats 42                 - сопоставление с образцом head дает энергичность вычислений
-- - head (42 : nats (42+1))        - конструктор : помогает компилятору понять,
--                                  - что сожно связать 42 с x и выполнить функцию, не вычисляя nats дальше

-- map (^2) $ nats 1                - бесконечный список квадратов натуральных чисел

let inf_squares = map (^2) $ nats 1    

-- Prelude> take 10 $ inf_squares
-- [1,4,9,16,25,36,49,64,81,100]